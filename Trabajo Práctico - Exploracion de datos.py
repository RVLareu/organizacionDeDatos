# -*- coding: utf-8 -*-
"""gorkha.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nmgSn-xTnRPWm18-wFIb6QorrHGAdKj0

**TP1 Exploración de Datos**

Enunciado: https://docs.google.com/document/d/1JsYpmZP-GRGVtKZX_aN4FdvLEFzImutK26gLbtJ6c8g/edit

Graficos: https://www.python-graph-gallery.com/
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline

plt.style.use('default') # haciendo los graficos un poco mas bonitos en matplotlib
#plt.rcParams['figure.figsize'] = (20, 10)

sns.set(style="whitegrid") # seteando tipo de grid en seaborn

pd.options.display.float_format = '{:20,.2f}'.format # suprimimos la notacion cientifica en los outputs

import warnings
warnings.filterwarnings('ignore')

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

id='1Xcx51Afb_Mzw56BCaF0wVu8eGFZWJhcZ'
id2='1F45NhouvIGHdsXLwZ2wU9rZAc16XL8Ls'
downloaded = drive.CreateFile({'id': id})
downloaded.GetContentFile('train_values.csv')
downloaded2 = drive.CreateFile({'id': id2})
downloaded2.GetContentFile('train_labels.csv')

earthquake_df = pd.read_csv('train_values.csv', encoding='latin1',sep=',')
earthquake_df.head()

earthquake_labels = pd.read_csv('train_labels.csv', encoding='latin1',sep=',')
earthquake_labels.head()

earthquake_labels.info()

earthquake_labels['building_id'] = pd.to_numeric(earthquake_labels['building_id'],downcast='integer')
earthquake_labels['damage_grade'] = pd.to_numeric(earthquake_labels['damage_grade'],downcast='integer')
earthquake_labels.info()

earthquake_df.info()

earthquake_df.value_counts(subset=['age'])

"""Se separan los datos de edificios 'historicos' y edificios modernos."""

earthquake_df_historicos = earthquake_df.loc[earthquake_df['age'] > 300]
earthquake_df = earthquake_df.loc[earthquake_df['age'] <= 300]

"""Convencion colores damage grade"""

colores = ['gold','coral','firebrick']

"""**Conteos**

**Cantidad de Familias afectadas**
"""

earthquake_df['count_families'].sum()

cantidad_familias_por_danio = earthquake_df[["building_id","count_families"]].merge(earthquake_labels,how="inner").groupby("damage_grade").agg({"count_families":"sum"})
cantidad_familias_por_danio.columns = ['Familias afectadas']
familias_graph = cantidad_familias_por_danio.plot(kind='bar',rot=0, color = 'coral')
familias_graph.set_xlabel("Grado de daño")
familias_graph.set_title('Cantidad de familias afectadas por grado de daño')
familias_graph.figure.set_size_inches(10,10)

residencias = earthquake_df.loc[earthquake_df['has_secondary_use'] == 0]
residencias_por_danio = residencias[["building_id"]].merge(earthquake_labels,how="inner").pivot_table(index='damage_grade',columns='damage_grade',values='building_id',aggfunc='count')
residencias_por_danio.T.index.name = 'Grado de daño'
residencias_graph = residencias_por_danio.plot(kind='bar',rot=0, color = colores)
residencias_graph.set_xlabel("Grado de daño")
residencias_graph.set_ylabel("Cantidad")
residencias_graph.set_title('Cantidad de residencias afectadas por grado de daño')
residencias_graph.figure.set_size_inches(5,5)

"""**Escuelas y centros de Salud afectados**"""

tipos_de_uso_secundario = earthquake_df.loc[earthquake_df["has_secondary_use"]==1]
escuelas_salud = tipos_de_uso_secundario.loc[(tipos_de_uso_secundario["has_secondary_use_school"]==1) | (tipos_de_uso_secundario["has_secondary_use_health_post"]==1)]
escuelas_salud_por_danio = escuelas_salud[["building_id","has_secondary_use_school"]].merge(earthquake_labels,how="inner")
escuelas_salud_por_danio= escuelas_salud_por_danio.pivot_table(index='has_secondary_use_school',columns='damage_grade',values='building_id',aggfunc='count')
escuelas_salud_por_danio.index = ["Centros de Salud","Escuelas"]
escuelas_salud_por_danio.T.index.name = 'Grado de daño'
escuelas_salud_graph = escuelas_salud_por_danio.plot(kind='bar',rot=0, color = ['gold','coral','firebrick'])
escuelas_salud_graph.set_xlabel(None)
escuelas_salud_graph.set_ylabel("Cantidad")
escuelas_salud_graph.set_title('Escuelas y centros de salud afectados')
escuelas_salud_graph.figure.set_size_inches(7,5)

"""**Edificios historicos**"""

edificios_historicos = earthquake_df_historicos[["building_id"]].merge(earthquake_labels,how="inner").pivot_table(index='damage_grade',columns='damage_grade',values='building_id',aggfunc='count')
edificios_historicos.T.index.name = 'Grado de daño'
edificios_historicos_graph = edificios_historicos.plot(kind='bar',rot=0, color = ['gold','coral','firebrick'])
edificios_historicos_graph.set_xlabel("Grado de daño")
edificios_historicos_graph.set_ylabel("Cantidad")
edificios_historicos_graph.set_title('Edificios historicos afectados')
edificios_historicos_graph.figure.set_size_inches(5,5)

"""**Construcciones con usos secundarios**"""

tiene_uso_secundario = len(tipos_de_uso_secundario)
sin_uso_secundario = len(earthquake_df.loc[earthquake_df["has_secondary_use"]==0])
plt.rcParams["figure.figsize"] = (20,5)
nombres= ['Con uso secundario', 'Sin uso secundario']
colors= [ '#8EB897', '#B7C3F3']
# Create a pieplot
plt.pie([tiene_uso_secundario, sin_uso_secundario], labels=nombres,  labeldistance=1.15,\
        wedgeprops = { 'linewidth' : 1, 'edgecolor' : 'black' }, colors=colors,autopct='%1.1f%%');
plt.title("Distribucion en el uso de edificaciones" )
plt.show();

cantidad_tipos_uso= tipos_de_uso_secundario.loc[:,"has_secondary_use_agriculture":"has_secondary_use_other"].sum()
cantidad_tipos_uso

usos_secundarios = pd.DataFrame({"usos":cantidad_tipos_uso.values},index=cantidad_tipos_uso.index)
usos_secundarios = usos_secundarios.loc[usos_secundarios["usos"]>100]

usos_secundarios.sort_values(by="usos", ascending=False)

usos_secundarios

usos_secundarios.index=["Agricultura","Hoteleria","Alquiler","Institucion","Industria","Otros"]
plot = usos_secundarios.plot.pie(y='usos', figsize=(10, 10),title="Distribucion de edificios afectados segun uso secundarios")

tipos_uso_daño = earthquake_df.loc[:,"has_secondary_use_agriculture":"has_secondary_use_other"]
tipos_uso_daño["building_id"] = earthquake_df["building_id"]
tipos_uso_daño = tipos_uso_daño.merge(earthquake_labels,how="inner")
tipos_uso_daño = tipos_uso_daño.groupby("damage_grade").agg({"has_secondary_use_agriculture":sum,"has_secondary_use_hotel":sum,"has_secondary_use_rental":sum,"has_secondary_use_institution":sum,"has_secondary_use_school":sum,"has_secondary_use_industry":sum,"has_secondary_use_health_post":sum,"has_secondary_use_gov_office":sum,"has_secondary_use_use_police":sum,"has_secondary_use_other":sum})
tipos_uso_daño = tipos_uso_daño.T
tipos_uso_daño["total"] = tipos_uso_daño.sum(axis=1)
tipos_uso_daño = tipos_uso_daño.T
for columna in tipos_uso_daño.columns:
  tipos_uso_daño[columna] = tipos_uso_daño[columna].divide(tipos_uso_daño[columna]["total"])
tipos_uso_daño  = tipos_uso_daño.T
del tipos_uso_daño["total"]
tipos_uso_daño.index = ["Agricultura","Hotel","Rental","Institutione","School","Industry","Health post","Goverment office","Police","Other"]
tipos_uso_daño.columns.name="Grado de daño"
tipos_uso_daño.sort_values(by=1,inplace=True)

tipos_uso_daño.plot(kind="bar",stacked=True,xlabel=" Tipo de uso secundario",ylabel="Porcentaje de edificios afectados",title="Grado de daño de acuerdo al tipo de uso secundario",rot=30,figsize=(15,10), color=colores)

"""**Daño de acuerdo al tipo de techo**"""

daño_por_techo = earthquake_df[["building_id","roof_type"]].merge(earthquake_labels,how="inner")
daño_por_techo = daño_por_techo.pivot_table(index="roof_type",columns="damage_grade",values="building_id",aggfunc="count")

daño_por_techo.fillna(0,inplace=True)
daño_por_techo["total"] = 0
daño_por_techo["total"] = daño_por_techo.sum(axis=1)
daño_por_techo = daño_por_techo.T
for columna in daño_por_techo.columns:
  daño_por_techo[columna] = daño_por_techo[columna].divide(daño_por_techo[columna]["total"])
daño_por_techo = daño_por_techo.T
del daño_por_techo["total"]
daño_por_techo.columns.name= "Grado de daño"
daño_por_techo=daño_por_techo.sort_values(by=1)
daño_por_techo.plot(kind="bar",xlabel="Tipo de techo",ylabel="Porcentaje de edificios afectados", title="Grado de daño de acuerdo al tipo de techo",rot=0,figsize=(10,8),stacked=True, color = colores)

"""**Grado de daño de acuerdo al tipo de construcción**"""

tipos_de_estructura = earthquake_df.loc[:,"has_superstructure_adobe_mud":"has_superstructure_other"].sum()
tipos_de_estructura = tipos_de_estructura.sort_values(ascending=False)
tipos_de_estructura.index = ["Adobe mud","Mud mortar stone","Stone Flag","Cement mortar stone","Mud mortar brick","Cement mortar brick","Timber","Bambú","Rc non engineered","Rc engineered","Other"]
tipos_de_estructura_plot = pd.DataFrame({'Cantidad de edificaciones afectadas':tipos_de_estructura},
                  index=tipos_de_estructura.index)
plot = tipos_de_estructura_plot.plot.bar(y='Cantidad de edificaciones afectadas', figsize=(8, 8),color="#8EB897",title="Cantidad de edificaciones afectadas de acuerdo al tipo de construccion",xlabel="Tipo de construccion",ylabel="Cantidad de edificaciones afectadas")

tipos_estructura_daño = earthquake_df.loc[:,"has_superstructure_adobe_mud":"has_superstructure_other"]
tipos_estructura_daño["building_id"] = earthquake_df["building_id"]
tipos_estructura_daño = tipos_estructura_daño.merge(earthquake_labels,how="inner")
tipos_estructura_daño = tipos_estructura_daño.groupby("damage_grade").agg({"has_superstructure_adobe_mud":sum,"has_superstructure_mud_mortar_stone":sum,"has_superstructure_stone_flag":sum,"has_superstructure_cement_mortar_stone":sum,"has_superstructure_mud_mortar_brick":sum,"has_superstructure_cement_mortar_brick":sum,"has_superstructure_timber":sum,"has_superstructure_bamboo":sum,"has_superstructure_rc_non_engineered":sum,"has_superstructure_rc_engineered":sum,"has_superstructure_other":sum})
tipos_estructura_daño = tipos_estructura_daño.T
tipos_estructura_daño["total"] = tipos_estructura_daño.sum(axis=1)
tipos_estructura_daño = tipos_estructura_daño.T
tipos_estructura_daño

for columna in tipos_estructura_daño.columns:
  tipos_estructura_daño[columna] = tipos_estructura_daño[columna].divide(tipos_estructura_daño[columna]["total"])
tipos_estructura_daño  = tipos_estructura_daño.T
del tipos_estructura_daño["total"]

tipos_estructura_daño.index = ["Adobe mud","Mud mortar stone","Stone Flag","Cement mortar stone","Mud mortar brick","Cement mortar brick","Timber","Bambú","Rc non engineered","Rc engineered","Other"]
tipos_estructura_daño.columns.name="Grado de daño"
tipos_estructura_daño.sort_values(by=1,inplace=True)
tipos_estructura_daño.plot(kind="bar",stacked=True,xlabel=" Tipo de construcción",ylabel="Porcentaje de edificios afectados",title="Grado de daño de acuerdo al tipo de construcción",rot=30,figsize=(15,10), color=colores)

"""**Grado de daño de acuerdo a la cantidad de pisos**"""

daño_por_piso = earthquake_df[["building_id","count_floors_pre_eq"]].merge(earthquake_labels,how="inner")
daño_por_piso = daño_por_piso.pivot_table(columns="damage_grade",index="count_floors_pre_eq",values="building_id",aggfunc="count")
daño_por_piso.fillna(0,inplace=True)
daño_por_piso["total"] = 0
daño_por_piso["total"] = daño_por_piso.sum(axis=1)
daño_por_piso = daño_por_piso.T
for columna in daño_por_piso.columns:
  daño_por_piso[columna] = daño_por_piso[columna].divide(daño_por_piso[columna]["total"])
daño_por_piso = daño_por_piso.T
del daño_por_piso["total"]
daño_por_piso.columns.name= "Grado de daño"

daño_por_piso.plot(kind="bar",xlabel="Cantidad de pisos previo al terremoto", ylabel="porcentaje de edificios afectados",title="Grado de daño de acuerdo a la cantidad de pisos",figsize=(10,8),stacked=True,color = colores,rot=0)

"""**Daño de acuerdo al tipo de cimiento**"""

daño_por_cimientos = earthquake_df[["building_id","foundation_type"]].merge(earthquake_labels,how="inner")
daño_por_cimientos = daño_por_cimientos.pivot_table(columns="damage_grade",index="foundation_type",values="building_id",aggfunc="count")
daño_por_cimientos.fillna(0,inplace=True)
daño_por_cimientos["total"] = 0
daño_por_cimientos["total"] = daño_por_cimientos.sum(axis=1)
daño_por_cimientos = daño_por_cimientos.T
for columna in daño_por_cimientos.columns:
  daño_por_cimientos[columna] = daño_por_cimientos[columna].divide(daño_por_cimientos[columna]["total"])
daño_por_cimientos = daño_por_cimientos.T
del daño_por_cimientos["total"]
daño_por_cimientos.columns.name= "Grado de daño"
daño_por_cimientos = daño_por_cimientos.sort_values(by=1)
daño_por_cimientos.plot(kind="bar",xlabel="Tipo de cimiento",ylabel="Porcentaje de edificios afectados",title="Grado de daño de acuerdo al tipo de cimiento",rot=0,figsize=(10,8),stacked=True,color = colores)

"""**Rc engineered cimientos i**

"""

rc_i = earthquake_df[(earthquake_df["has_superstructure_rc_engineered"]==1) & (earthquake_df["foundation_type"]=="i")]
len(rc_i)

rc = earthquake_df[(earthquake_df["has_superstructure_rc_engineered"]==1)]
rc_sin_i = len(rc)-len(rc_i)
rc_sin_i

plt.rcParams["figure.figsize"] = (5,10)
nombres= ['Rc engineered y cimientos tipo i', 'Rc engineered sin cimientos i']
colors= colores
plt.pie([len(rc_i),rc_sin_i], labels=nombres,  labeldistance=1.15,\
        wedgeprops = { 'linewidth' : 1, 'edgecolor' : 'black' }, colors=['#8EB897', '#B7C3F3',], autopct='%1.1f%%');
plt.title("Porcentaje de estructura Rc engineered con tipo de cimientos i")
plt.show();

"""**Daño de acuerdo a la configuración del plano**"""

plan_configuration = earthquake_df.loc[:,["plan_configuration","building_id"]]
plan_configuration = plan_configuration.merge(earthquake_labels,how="inner")

plan_configuration = plan_configuration.pivot_table(index="plan_configuration",columns="damage_grade",values="building_id",aggfunc="count")
plan_configuration["total"] = plan_configuration.sum(axis=1)
plan_configuration = plan_configuration.T

for columna in plan_configuration.columns:
  plan_configuration[columna] = plan_configuration[columna].divide(plan_configuration[columna]["total"])
plan_configuration  = plan_configuration.T
del plan_configuration["total"]
plan_configuration.sort_values(by=1,inplace=True)
plan_configuration.columns.name = "Grado de daño"
plan_configuration.plot(kind="bar",stacked=True,figsize=(10,8), xlabel= "Plan configuration", ylabel="Porcentaje de edificios afectados", title="Grado de daño de acuerdo al Plan Configuration",color=colores)

"""### **Hipotesis**:

**Los edificios más viejos y mas altos sufrieron más daños**
"""

antiguedad_altura_short = earthquake_df.loc[(earthquake_df["count_floors_pre_eq"] < 8)]
l = [0,20,40,60,80,100,120,140,160,180,200]
labels = ['20','40','60','80','100','120','140','160','180','200']
antiguedad_altura_short["age"] = pd.cut(antiguedad_altura_short["age"], bins=l, include_lowest=True,labels=labels)
daño_por_antiguedad_altura = antiguedad_altura_short[["building_id","age","count_floors_pre_eq"]].merge(earthquake_labels,how="inner")\
                                          .pivot_table(index='age',columns='count_floors_pre_eq',values='damage_grade',aggfunc='mean')
heatmap_floors = sns.heatmap(daño_por_antiguedad_altura, cmap="BuPu")
heatmap_floors.set_xlabel('Número de pisos')
heatmap_floors.set_ylabel('Antigüedad')
heatmap_floors.set_title('Daño respecto al número de pisos y antigüedad')
heatmap_floors.figure.set_size_inches(6,6)

"""**Mientras mayor sea el cociente altura/área mayor será el daño**"""

earthquake_df["altura_sobre_area"] = earthquake_df["height_percentage"]/earthquake_df["area_percentage"]
daño_por_altura_area_short = earthquake_df.loc[earthquake_df["altura_sobre_area"] <= 4]
daño_por_altura_area = daño_por_altura_area_short[["building_id","altura_sobre_area"]].merge(earthquake_labels,how="inner")
altura_area_graph = sns.regplot(x=daño_por_altura_area["altura_sobre_area"], y=daño_por_altura_area["damage_grade"], line_kws={"color":"r","alpha":0.7,"lw":5})
altura_area_graph.set_xlabel('Relación Altura/Area')
altura_area_graph.set_ylabel('Grado de daño')
altura_area_graph.set_title('Daño respecto a la altura y area')
altura_area_graph.figure.set_size_inches(10,6)
plt.show()

"""**Las estructuras de concreto son menos propensas a daños de grado 3** """

earthquake_cref = earthquake_df.loc[(earthquake_df['has_superstructure_rc_engineered'] == 1) \
                                    | (earthquake_df['has_superstructure_rc_non_engineered'] == 1),\
                                    ['building_id', 'age']]
earthquake_cref= earthquake_cref.merge(earthquake_labels, on='building_id')
earthquake_cref_by_damage = earthquake_cref.groupby('damage_grade').agg({'building_id':'count'})
earthquake_cref_by_damage = earthquake_cref_by_damage.rename(columns={'building_id':'total_building'})
earthquake_cref_by_damage = earthquake_cref_by_damage.reset_index()
earthquake_cref_by_damage

plt.rcParams["figure.figsize"] = (20,10)

nombres= ['Grado 1', 'Grado 2', 'Grado 3']
colors= colores


#plt.boxplot("PopularitY of Programming Language\n", bbox={'facecolor':'0.8', 'pad':5})
# Create a pieplot
plt.pie(earthquake_cref_by_damage['total_building'], labels=nombres,  labeldistance=1.15,\
        wedgeprops = { 'linewidth' : 1, 'edgecolor' : 'black' }, colors=colors, autopct='%1.1f%%');
plt.title("Grados de daño en estructuras de concreto")
plt.show();

"""Comparacion con estructuras que no son de concreto."""

earthquake_non_cref = earthquake_df.loc[(earthquake_df['has_superstructure_rc_engineered'] == 0) \
                                    & (earthquake_df['has_superstructure_rc_non_engineered'] == 0),\
                                    ['building_id', 'age']]
earthquake_non_cref= earthquake_non_cref.merge(earthquake_labels, on='building_id')
earthquake__non_cref_by_damage = earthquake_non_cref.groupby('damage_grade').agg({'building_id':'count'})
earthquake__non_cref_by_damage = earthquake__non_cref_by_damage.rename(columns={'building_id':'total_building'})
earthquake__non_cref_by_damage = earthquake__non_cref_by_damage.reset_index()
earthquake__non_cref_by_damage

plt.rcParams["figure.figsize"] = (20,10)

nombres= ['Grado 1', 'Grado 2', 'Grado 3']
colors= colores


#plt.boxplot("PopularitY of Programming Language\n", bbox={'facecolor':'0.8', 'pad':5})
# Create a pieplot
plt.pie(earthquake__non_cref_by_damage['total_building'], labels=nombres,  labeldistance=1.15,\
        wedgeprops = { 'linewidth' : 1, 'edgecolor' : 'black' }, colors=colors, autopct='%1.1f%%');
plt.title("Grados de daño en estructuras que no son de concreto")
plt.show();

"""**Hay zonas especificas que reciben mas daño grave**"""

earthquake_cref2 = earthquake_df.loc[(earthquake_df['has_superstructure_rc_non_engineered'] == 1) | \
                                     (earthquake_df['has_superstructure_rc_engineered'] == 1) ,\
                                    ['building_id', 'geo_level_1_id']]
earthquake_cref2_zone = earthquake_cref2.merge(earthquake_labels, on='building_id')
earthquake_cref_by_zone = earthquake_cref2_zone.groupby(['damage_grade','geo_level_1_id']).agg({'building_id':'count'})

"""Filtro solo las zonas que tienen mas de 100 edificios."""

earthquake_cref_by_graf1 = earthquake_cref_by_zone
earthquake_cref_by_graf1['Total'] = earthquake_cref_by_graf1.groupby('geo_level_1_id')['building_id'].transform('sum')
earthquake_cref_by_graf1['mean'] = (earthquake_cref_by_graf1['building_id'] / earthquake_cref_by_graf1['Total'])
earthquake_cref_by_graf1 = earthquake_cref_by_graf1.reset_index()
earthquake_cref_by_graf1 = earthquake_cref_by_graf1.loc[earthquake_cref_by_graf1['Total'] > 100 ,['geo_level_1_id','damage_grade', 'mean']]
earthquake_cref_by_graf1

earthquake_cref_by_graf2 = earthquake_cref_by_graf1.set_index(['geo_level_1_id', 'damage_grade'])
earthquake_cref_by_graf2 = earthquake_cref_by_graf2.unstack().fillna(0)
earthquake_cref_by_graf2.columns = [1,2,3]
earthquake_cref_by_graf2.columns.name = "Grado de daño"
earthquake_cref_by_graf2

earthquake_cref_by_graf2.plot(kind="bar",stacked=True,figsize=(10,10), xlabel= "Geo Level 1 id", ylabel="Porcentaje de edificios afectados", title="Grado de daño de acuerdo zona",color=colores)

"""**Las estructuras de barro son mas propensas al daño**"""

earthquake_adobe = earthquake_df.loc[(earthquake_df['has_superstructure_adobe_mud'] == 1) \
                                    | (earthquake_df['has_superstructure_mud_mortar_brick'] == 1)\
                                    | (earthquake_df['has_superstructure_mud_mortar_stone'] == 1),\
                                      
                                    ['building_id', 'age']]
earthquake_adobe= earthquake_adobe.merge(earthquake_labels, on='building_id')
earthquake_adobe_by_damage = earthquake_adobe.groupby('damage_grade').agg({'building_id':'count'})
earthquake_adobe_by_damage = earthquake_adobe_by_damage.reset_index()
earthquake_adobe_by_damage

plt.rcParams["figure.figsize"] = (20,10)
nombres = ['Grado 1', 'Grado 2', 'Grado 3']

#colors= [ '#8EB897', '#B7C3F3', '#DD7596']
colors = colores
# Create a pieplot
plt.pie(earthquake_adobe_by_damage['building_id'], labels=nombres,  labeldistance=1.15,\
        wedgeprops = { 'linewidth' : 1, 'edgecolor' : 'black' }, colors=colors,  autopct='%1.1f%%');
plt.title("Grado daño estructuras con barro")
plt.show();

earthquake_non_adobe = earthquake_df.loc[(earthquake_df['has_superstructure_adobe_mud'] == 0) \
                                    & (earthquake_df['has_superstructure_mud_mortar_brick'] == 0)\
                                    & (earthquake_df['has_superstructure_mud_mortar_stone'] == 0),\
                                      
                                    ['building_id', 'age']]
earthquake_non_adobe= earthquake_non_adobe.merge(earthquake_labels, on='building_id')
earthquake_non_adobe_by_damage = earthquake_non_adobe.groupby('damage_grade').agg({'building_id':'count'})
earthquake_non_adobe_by_damage = earthquake_non_adobe_by_damage.reset_index()
earthquake_non_adobe_by_damage

"""Edificaciones sin barro"""

plt.rcParams["figure.figsize"] = (20,10)
nombres = ['Grado 1', 'Grado 2', 'Grado 3']
colors= colores
# Create a pieplot
plt.pie(earthquake_non_adobe_by_damage['building_id'], labels=nombres,  labeldistance=1.15,\
        wedgeprops = { 'linewidth' : 1, 'edgecolor' : 'black' }, colors=colors,  autopct='%1.1f%%');
plt.title("Grado de daño de las estructuras sin barro")
plt.show();

"""**Las edificaciones de Bamboo de mas de 2 pisos son mas inestables y reciben mucho daño**"""

earthquake_bamboo = earthquake_df.loc[(earthquake_df['has_superstructure_bamboo'] == 1) ,\
                                      ['building_id', 'age', 'count_floors_pre_eq']]
earthquake_bamboo= earthquake_bamboo.merge(earthquake_labels, on='building_id')
earthquake_bamboo_by_damage = earthquake_bamboo.groupby('damage_grade').agg({'building_id':'count'})
earthquake_bamboo_by_damage = earthquake_bamboo_by_damage.reset_index()
earthquake_bamboo_by_damage

earthquake_bamboo_may2 = earthquake_bamboo.loc[earthquake_bamboo['count_floors_pre_eq'] > 2 ,:]
earthquake_bamboo_may2 = earthquake_bamboo_may2.groupby('damage_grade').agg({'building_id':'count'})
earthquake_bamboo_may2 = earthquake_bamboo_may2.reset_index()
earthquake_bamboo_may2

plt.rcParams["figure.figsize"] = (20,10)
nombres= ['Grado 1', 'Grado 2', 'Grado 3']
colors= colores
# Create a pieplot
plt.pie(earthquake_bamboo_may2['building_id'], labels=nombres,  labeldistance=1.15,\
        wedgeprops = { 'linewidth' : 1, 'edgecolor' : 'black' }, colors=colors,  autopct='%1.1f%%');
plt.title("Grado de daño de las edificaciones de bamboo de mas de 2 pisos")
plt.show();

"""**El terremoto afecta mas a las edificaciones antiguas**

Filtro por antiguedad y cantidad de pisos.
"""

age_floors = earthquake_df[["building_id","age","count_floors_pre_eq"]].merge(earthquake_labels,how="right", on='building_id')
age_floors['unit'] = 1

"""Quiero saber cuantas edificaciones tienen mas de 100 años"""

age_floors['more 100 years'] = (age_floors['age'] > 100)
age_floors['more 100 years'].value_counts()

"""Como son pocos en relacion a el total de las edificaciones los voy a agrupar en una sola categoria."""

age_floors_more_100_years = age_floors.loc[age_floors['more 100 years'],:]
age_floors_more_100_years_by_damage = age_floors_more_100_years.groupby(['damage_grade']).agg({'unit':'sum'})
age_floors_more_100_years_by_damage = age_floors_more_100_years_by_damage.rename(columns= {'unit':'total_building'})
age_floors_more_100_years_by_damage['age'] = 'Mayoress de 100 años'
age_floors_more_100_years_by_damage = age_floors_more_100_years_by_damage[['age', 'total_building']]
age_floors_more_100_years_by_damage = age_floors_more_100_years_by_damage.reset_index()
age_floors_more_100_years_by_damage = age_floors_more_100_years_by_damage.set_index(['damage_grade','age'])
age_floors_more_100_years_by_damage

"""Recategorizo"""

age_floors_less_100_years = age_floors.loc[(age_floors['more 100 years']) == False ,:]
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(0,5).replace(5,10)
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(10,15)
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(15,20)
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(20,25)
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(25,'Hasta 25 años')
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(30,35)
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(35,40)
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(40,45)
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(45,50)
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(50,"Mas de 25 y menos de 50 años")
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(55,60)
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(60,65)
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(65,70)
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(70,75)
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(75,"Mas de 50 y menos de 75 años")
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(80,85)
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(85,90)
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(90,95)
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(95,100)
age_floors_less_100_years['age'] = age_floors_less_100_years['age'].replace(100,"Mas de 75 y hasta de 100 años")
age_floors_less_100_years_by_damage = age_floors_less_100_years.groupby(['damage_grade', 'age']).agg({'unit':'sum'})
age_floors_less_100_years_by_damage = age_floors_less_100_years_by_damage.rename( columns= {'unit':'total_building'})
age_floors_less_100_years_by_damage

"""Uno los dos dataFrame y agrego columnas para sacar el porcentaje del tipo de daño en relacion a la edad de los edificios."""

age_floors_final = [age_floors_less_100_years_by_damage , age_floors_more_100_years_by_damage]
age_floors_final = pd.concat(age_floors_final)
age_floors_final = age_floors_final.groupby(['damage_grade', 'age']).agg({'total_building':'sum'})
age_floors_final['total_by_age'] = age_floors_final.groupby('age')['total_building'].transform('sum')
age_floors_final['mean_damage_grade'] = (age_floors_final['total_building']  * 100 / age_floors_final['total_by_age'] )
age_floors_final

grafico_age_danio = age_floors_final.reset_index()
grafico_age_danio = grafico_age_danio.loc[:,['age', 'damage_grade', 'mean_damage_grade']]
grafico_age_danio = grafico_age_danio.set_index(['age', 'damage_grade'])
grafico_age_danio = grafico_age_danio.unstack()
grafico_age_danio.columns = [1,2,3]
grafico_age_danio.columns.name = "Grado de daño"
colors2= [ '#8EB897', '#B7C3F3', '#DD7596']
grafico_age_danio.plot(kind="bar",stacked=True, xlabel=" Edad de edificacion", ylabel="Porcentaje de edificios afectados",title="Grado de daño de acuerdo la edad de los edificios",rot=30,figsize=(10,8), color=colores)