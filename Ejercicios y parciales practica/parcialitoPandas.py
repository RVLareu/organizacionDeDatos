# -*- coding: utf-8 -*-
"""ParcialitoPandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R9xnBPlbzAqbSFVkt8T8SkRGG8v01ZP6
"""

import pandas as pd
import numpy as np

event_log = pd.DataFrame({"event_id":["A01","A02","A03","A04","A05","A06","A05","A06"],
                     "event_type_id":["C01","C02","C03","C02","C03","C02","C03","C02"],
                     "event_status":["ERROR","DELAYED","ERROR","CAPTURED","CAPTURED","DELAYED","ERROR","ERROR"],
                     "country_id":["BR","ARG","BR","BR","USA","BR","USA","BR"],
                     "event_producer_id":["B01","B02","A03","B01","B01","B03","B01","B03"],
                     "event_date":["2020-9-13","2020-9-12","2020-9-13","2020-9-12","2020-9-15","2020-9-16","2020-9-15","2020-9-16"]})

event_types = pd.DataFrame({"event_type_id":["C01","C02","C03","C04","C05","C06","C07","C08"],
                     "event_type_name":["A","B","B","B","B","B","B","B"],
                     "event_consumer_id":["D01","D02","D03","D04","D05","D06","D07","D08"],
                     "event_consumer_target":["erp","dynamodb","salesforce","dynamodb","salesforce","erp","erp","erp"]
                     })

event_log

event_types

"""Top 5 de Consumers que han tenido la mayor cantidad de eventos que resultaron en un
event_status de ERROR.

"""

#me quedo con los eventos que terminaron en ERROR. Quedan los eventos y tipos de eventos asociados a error
event_log_error = event_log[event_log["event_status"]=="ERROR"]
event_log_error = event_log_error[["event_type_id","event_id"]]
event_log_error

#lo cruzo con event_types para ver los event_consumer_id
event_log_error_consumer_id = event_log_error.merge(event_types,how="inner")
event_log_error_consumer_id

#cuento las ocurrencias de event_cada consumer_id, por ser dataset de juguete me quedo con los 2 con mas errores
event_log_error_consumer_id["event_consumer_id"].value_counts().nlargest(2)

"""De los eventos ocurridos para el country_id: BR indicar la cantidad de eventos totales por cada
evento ocurridos por event_consumer_target.
"""

#me quedo con los eventos ocurridos en BR
event_log_br = event_log[event_log["country_id"] == "BR"]
event_log_br = event_log_br[["event_id","event_type_id","event_status"]]
event_log_br

#cruzo con event_type para quedarme con los tipos de eventos en BR
event_log_br_type = event_log_br.merge(event_types,how="inner")
event_log_br_type

#me quedo con las columnas que quiero
event_log_br_type = event_log_br_type[["event_consumer_target","event_status"]]
event_log_br_type

event_log_br_type["auxiliar"] = np.repeat([1],len(event_log_br_type))
event_log_br_type

#Hago pivot table donde si cae en la misma celda, suma 1.
event_log_br_type_totales = event_log_br_type.pivot_table(index="event_status",columns="event_consumer_target",values="auxiliar",aggfunc="sum")
event_log_br_type_totales.columns.name = None
event_log_br_type_totales.reset_index(inplace=True)

#Si el evento debe quedar como columna y no como indice, la linea de abajo no hace falta
event_log_br_type_totales.set_index("event_status")

event_log_br_type_totales.fillna(0)