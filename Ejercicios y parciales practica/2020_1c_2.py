# -*- coding: utf-8 -*-
"""2020-1c-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fF387JyQlZ19KUNOeRjY7n-qQdy6Gteb

Contamos con un RDD en Apache Spark que registra items comprados por usuarios en un
sitio de ecommerce, el RDD es muy simple y solo registra (user_id, product_id).
Usando PySpark pedimos desarrollar la funcion find_similar_users(user_id, k) Que devuelva
los ids de los “k” usuarios más similares al usuario pasado como parámetro usando como
semejanza la semejanza de Jaccard.
"""

!pip install pyspark
!pip install -U -q PyDrive
!apt update
!apt install openjdk-8-jdk-headless -qq
import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"

from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark import SparkContext
from pyspark.sql import SQLContext

spark = SparkSession.builder.getOrCreate()
sc = spark.sparkContext

compras = [(1,"p1"),
           (1,"p1"),
           (2,"p2"),
           (1,"p2"),
           (1,"p2"),
           (2,"p3"),
           (3,"p3")

           ]

comprasRdd = sc.parallelize(compras)

rdd_usuarios_productos = comprasRdd.groupByKey().mapValues(list).map(lambda x: (x[0],list(set(x[1])))  )
rdd_usuarios_productos.collect()

productos_query = rdd_usuarios_productos.filter(lambda x: x[0]== 1).collect()[0][1]
productos_query

rdd_usuarios_semejanza = rdd_usuarios_productos.filter(lambda x: x[0]!= 1).map(lambda x: (x[0],jaccard(productos_query,x[1])) )
 rdd_usuarios_semejanza.collect()

def jaccard(grupo1,grupo2):
  interseccion = len(set(grupo1).intersection(set(grupo2)))
  union = len(set(grupo1).union(set(grupo2)))
  return interseccion/union


#set no tiene multiples ocurrencias del mismo item
def find_similar_users(rdd,user_id,k):
  #agrupo en lista los items por usuario
  rdd_usuarios_productos = rdd.groupByKey().mapValues(list).map(lambda x: (x[0],list(set(x[1])))  ).cache()

  #me quedo con los items del usuario consultado
  productos_query = rdd_usuarios_productos.filter(lambda x: x[0]== user_id).collect()[0][1]


  #calculo semejanza con el resto de usuarios (descartando al propio)
  rdd_usuarios_semejanza = rdd_usuarios_productos.filter(lambda x: x[0]!= user_id).map(lambda x: (x[0],jaccard(productos_query,x[1])) )


  #k_mas_similares
  k_semejantes = rdd_usuarios_semejanza.takeOrdered(k,lambda x: -x[1])

  return [usuario for usuario,similaridad in k_semejantes]

find_similar_users(comprasRdd,user_id=1,k=1)